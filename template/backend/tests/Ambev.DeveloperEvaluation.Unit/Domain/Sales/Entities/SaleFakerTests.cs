using Ambev.DeveloperEvaluation.Domain.Entities;
using Bogus;
using FluentAssertions;
using Xunit;

namespace Ambev.DeveloperEvaluation.Unit.Domain.Sales.Entities;

public class SaleFakerTests
{
    [Fact(DisplayName = "Should generate a valid Sale with SaleItems using Faker")]
    public void Should_GenerateValidSale_WithSaleItems_UsingFaker()
    {
        // Arrange
        var saleItemFaker = new Faker<SaleItem>()
            .CustomInstantiator(f => new SaleItem(
                f.Commerce.ProductName(),
                f.Random.Int(1, 20), // Quantity between 1 and 20
                f.Finance.Amount(1, 100) // UnitPrice between 1 and 100
            ))
            .RuleFor(si => si.Id, f => f.Random.Guid()); // Ensure Id is generated by Faker

        var saleFaker = new Faker<Sale>()
            .CustomInstantiator(f => new Sale(
                f.Company.CompanyName(),
                f.Address.City()
            ))
            .RuleFor(s => s.Id, f => f.Random.Guid()) // Ensure Id is generated by Faker
            .RuleFor(s => s.SaleDate, f => f.Date.Past(1))
            .RuleFor(s => s.SaleNumber, f => $"SALE-{f.Random.Long(1000000000000, 9999999999999)}")
            .RuleFor(s => s.IsCancelled, f => false);

        // Act
        var sale = saleFaker.Generate();
        var numberOfItems = new Faker().Random.Int(1, 5);
        for (int i = 0; i < numberOfItems; i++)
        {
            var item = saleItemFaker.Generate();
            sale.AddItem(item.ProductName, item.Quantity, item.UnitPrice);
        }

        // Assert
        sale.Should().NotBeNull();
        sale.Id.Should().NotBeEmpty();
        sale.Customer.Should().NotBeNullOrEmpty();
        sale.Branch.Should().NotBeNullOrEmpty();
        sale.SaleDate.Should().BeBefore(DateTime.UtcNow);
        sale.SaleNumber.Should().StartWith("SALE-");
        sale.Items.Should().NotBeEmpty();
        sale.Items.Should().HaveCountGreaterOrEqualTo(1).And.HaveCountLessOrEqualTo(5);

        foreach (var item in sale.Items)
        {
            item.Should().NotBeNull();
            item.Id.Should().NotBeEmpty();
            item.ProductName.Should().NotBeNullOrEmpty();
            item.Quantity.Should().BeInRange(1, 20);
            item.UnitPrice.Should().BeInRange(1, 100);
            item.Discount.Should().BeOneOf(0m, 0.10m, 0.20m); // Verify discount calculation
            item.TotalAmount.Should().BeGreaterThan(0); // Verify total amount calculation
        }

        sale.TotalAmount.Should().Be(sale.Items.Sum(item => item.TotalAmount));
    }
}
